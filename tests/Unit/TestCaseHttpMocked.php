<?php

namespace CTApi\Test\Unit;

use CTApi\CTClient;
use CTApi\CTConfig;
use CTApi\Test\Unit\HttpMock\CTClientMock;
use PHPUnit\Framework\TestCase;

class TestCaseHttpMocked extends TestCase
{
    private CTClientMock $ctClientMock;

    protected function setUp(): void
    {
        parent::setUp();

        $this->ctClientMock = new CTClientMock();

        CTConfig::setApiUrl("https://example.church.tools/");
        CTConfig::setApiKey("notnullapikey");
        CTClient::setClient($this->ctClientMock);
    }

    protected function setClientMock(CTClientMock $clientMock)
    {
        $this->ctClientMock = $clientMock;
        CTClient::setClient($this->ctClientMock);
    }

    protected function getClientMock(): CTClientMock
    {
        return $this->ctClientMock;
    }

    protected function assertRequestCallExists(string $method, $uri = null): array
    {
        return $this->ctClientMock->assertRequestCallExists($method, $uri);
    }

    protected function assertRequestCallNotExists(string $method, $uri = null): void
    {
        $this->ctClientMock->assertRequestCallNotExists($method, $uri);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        // overwrite custom CTClientMock with default HTTP-Configuration
        $client = CTClient::createClient();
        CTClient::setClient($client);
    }
}